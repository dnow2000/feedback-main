#!/bin/bash

set -o nounset

# =============================================
#  Global config of the application
# =============================================

PRG="$BASH_SOURCE"
while [ -h "$PRG" ] ; do
  ls=$(ls -ld "$PRG")
  link=$(expr "$ls" : '.*-> \(.*\)$')
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=$(dirname "$PRG")"/$link"
  fi
done

ROOT_PATH="."
if [ -x "$(command -v realpath)" ]; then
  ROOT_PATH=$(realpath "$(dirname "$PRG")")
fi


set -o allexport
source $ROOT_PATH/.env
set +o allexport

# =============================================
#  Helper that describes all functionalities
# =============================================

PARAM_FIELDS="option name entries default help"
if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
  echo "$(basename "$0") -- program to deal with $APP_NAME ecosystem
where:
  -h                                                                                                show this help text"
  while read $PARAM_FIELDS; do
    printf "  %s=%-12s %-50s %-30s %s\n" $option "<$name>" "$(sed -e 's/^"//' -e 's/"$//' <<<"$entries")" "(default: $default)" "$(sed -e 's/^"//' -e 's/"$//' <<<"$help")"
  done < params.txt
  exit 0
fi


# =============================================
# Global Utilities
# =============================================

function confirm {
  read -p "$1 (y/n) : " -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit
  fi
}


function ensure_remote {
  if [[ "$ENV" == "not-set" ]]; then
    echo "$1"
    exit 3
  fi
}

function exit_with_error {
  MESSAGE=${1-"end of $APP_NAME command."}
  RED='\033[0;31m'
  NO_COLOR='\033[0m'
  echo -e "${RED}""ERROR : $MESSAGE""${NO_COLOR}"
  exit 1
}

function exit_with_success {
  MESSAGE=${1-"end of $APP_NAME command."}
  GREEN='\033[0;32m'
  NO_COLOR='\033[0m'
  echo -e "${GREEN}""SUCCESS : $MESSAGE""${NO_COLOR}"
  exit 0
}


# =============================================
# Get script parameters
# =============================================

while read $PARAM_FIELDS; do
  eval "$name=$default"
done < $ROOT_PATH/params.txt

while read; do
  while read $PARAM_FIELDS; do
    if [[ $# -gt 2 ]]; then
      if [[ "$1" == "$option" ]]; then
        eval "$name=$2"
        shift 2
      fi
    fi
  done < $ROOT_PATH/params.txt
done < $ROOT_PATH/params.txt


if [[ "$TAG" != "not-set" ]] && [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+ ]]; then
  echo "tag format should be Semantic Versioning compliant x.x.x"
  exit 1
fi

CMD="$1"
shift

# =============================================
# Set variables for env
# =============================================

API_SERVICE=${APP_NAME}-api-$MODE
POSTGRES_DB=${APP_NAME}_$DATABASE
POSTGRES_PASSWORD=${APP_NAME}_password
POSTGRES_SERVICE=$APP_NAME-${DATABASE}db-$MODE
POSTGRES_USER=${APP_NAME}_user
SCALINGO_APP=${APP_NAME}-api-$ENV


# =============================================
# Local commands : use Docker
# =============================================

function check {
  STATE=$1
  CONTAINER=${APP_NAME}-${2}-${MODE}
  GREP=$(docker ps | grep $CONTAINER)
  if [[ "$GREP" ]]; then
    if [[ "$STATE" == "stop" ]]; then
      exit_with_error "$CONTAINER is running. You should stop it before applying your command."
    fi
  elif [[ "$STATE" == "start" ]]; then
    exit_with_error "$CONTAINER is not running. You should start it before applying your command."
  fi
}


function containers_from_names {
  FIELDS=("${@/#}")
  FIELDS=("${FIELDS[@]/%/-$MODE}")
  echo "${FIELDS[*]}"
}

# Run alembic migration, ex ./$COMMAND_NAME alembic upgrade HEAD
if [[ "$CMD" == "alembic" ]]; then
  check start api
  check start apidb
  SUB_COMMANDS=$*
  docker exec $API_SERVICE bash -c "cd /opt/api && PYTHONPATH=. alembic $SUB_COMMANDS"
  if [[ $SUB_COMMANDS == "revision" ]]; then
    echo "Apply sudo chown the revisions to your $(whoami) user..."
    sudo chown -R $(whoami) $ROOT_PATH/api/alembic/versions
    echo "...Done."
  fi
  exit_with_success


# Connect to API container
elif [[ "$CMD" == "bash" ]]; then
	if [[ "$ENV" == "not-set" && "$PLATFORM" == "not-set" ]]; then
    check start api
    docker exec -it $API_SERVICE bash
	elif [ "$ENV" != "not-set" ] || [ "$PLATFORM" == "scalingo" ]; then
		scalingo -a "$SCALINGO_APP" run "bash"
	fi
  exit_with_success


# Build the docker images
elif [[ "$CMD" == "build" ]]; then
  docker-compose -f docker-compose.$MODE.yml build $(containers_from_names $*)
  exit_with_success


# Launch the python clock process locally
elif [[ "$CMD" == "clock" ]]; then
  check start api
  docker exec $API_SERVICE bash -c "cd /opt/api && PYTHONPATH=. python clock.py"
  exit_with_success

# Apply sub command to the databases from tar db files
elif [[ "$CMD" == database ]]; then
  SUB_CMD=$1
  shift

  if [[ "$DATABASE" == "not-set" ]]; then
    exit_with_error "You need to specify which database shared volume to rm (by -d api or -d geo or -d sync)"
  fi

  if [[ "$SUB_CMD" == "restore" ]]; then
    check start ${DATABASE}db
    BACKUP_PATH="$1"
    BACKUP=$(echo $BACKUP_PATH | rev | cut -d'/' -f1 | rev | cut -d'.' -f1)
    echo $BACKUP
    cd $ROOT_PATH;
    BACKUP_ID=$(echo $BACKUP | rev | cut -d"_" -f1,2 | rev)
    tar xvfz $BACKUP_PATH;
    sudo mkdir -p docker_data_$MODE/${DATABASE}db/tmp/;
    sudo mv $BACKUP.pgsql docker_data_$MODE/${DATABASE}db/tmp;
    docker exec $POSTGRES_SERVICE bash -c "PGPASSWORD='$POSTGRES_PASS' pg_restore -h localhost -d '$POSTGRES_DBNAME' -U '$POSTGRES_USER' -c -C -W -v -O /var/lib/postgresql/tmp/$BACKUP.pgsql;PGPASSWORD='$POSTGRES_PASS' psql -h localhost -U '$POSTGRES_USER' postgres -c \"SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname='${APP_NAME}_${DATABASE}';\";PGPASSWORD=$'$POSTGRES_PASS' dropdb -h localhost -U '$POSTGRES_USER' ${APP_NAME}_${DATABASE};PGPASSWORD='$POSTGRES_PASS' psql -h localhost -U '$POSTGRES_USER' postgres -c \"ALTER DATABASE ${APP_NAME}_${DATABASE}_${BACKUP_ID} RENAME TO ${APP_NAME}_${DATABASE};\""

  elif [[ "$SUB_CMD" == "rm" ]]; then
    check stop ${DATABASE}db
    if [[ "$DATABASE" == "api" ]]; then
      check stop api
    fi
    sudo rm -rf $ROOT_PATH/docker_data_${MODE}/${DATABASE}db

  elif [[ "$SUB_CMD" == "schema" ]]; then
    check start ${DATABASE}db
    FILE=schema_init_$(date +"%Y_%m_%d__%H_%M_%S").sql
    docker exec $POSTGRES_SERVICE bash -c "PGPASSWORD='$POSTGRES_PASS' pg_dump -h localhost -d '$POSTGRES_DBNAME' -U '$POSTGRES_USER' --no-comments --no-owner -N function_schema --no-privileges --schema-only --exclude-table alembic_version --exclude-schema topology --username '$POSTGRES_USER' --format p > /var/lib/postgresql/tmp/$FILE"
    sudo sed -i "s/SELECT pg_catalog.set_config('search_path', '', false);/SET search_path = public, pg_catalog;/g" $ROOT_PATH/docker_data_$MODE/${DATABASE}db/tmp/$FILE
    sudo sed -i '/CREATE FUNCTION/,/;/d' $ROOT_PATH/docker_data_$MODE/${DATABASE}db/tmp/$FILE
    sudo sed -i '/CREATE OPERATOR/,/;/d' $ROOT_PATH/docker_data_$MODE/${DATABASE}db/tmp/$FILE
    if [[ "$DATABASE" == "api" ]]; then
      sudo mv docker_data_$MODE/${DATABASE}db/tmp/$FILE $ROOT_PATH/api/alembic/versions/sql/$FILE
      confirm "Warning: remove previous schema_init.sql ?"
      rm -f $ROOT_PATH/api/alembic/versions/sql/schema_init.sql;
      mv $ROOT_PATH/api/alembic/versions/sql/$FILE $ROOT_PATH/api/alembic/versions/sql/schema_init.sql
    fi

  elif [[ "$SUB_CMD" == "restamp" ]]; then
    if [[ "$DATABASE" != "api" ]]; then
      exit_with_error "This command is only available for -d api."
    fi
    confirm "Did you first deleted the database ? (else do a $APP_NAME -d api database rm)"
    check start apidb
    check start api
    docker exec $API_SERVICE bash -c "cd /opt/api && PYTHONPATH=. alembic stamp base && PYTHONPATH=. alembic upgrade head;"
  else
    check start ${DATABASE}db
    if [[ "$DATABASE" == "api" ]]; then
      check start api
    fi
    docker exec $API_SERVICE bash -c "cd /opt/api && PYTHONPATH=. python scripts/manager.py database --command=$SUB_CMD"
  fi
  exit_with_success


# Dump database into pgdump file
elif [[ "$CMD" == "env" ]]; then
  cat $ROOT_PATH/.env
  echo ""
  while read $PARAM_FIELDS; do
    echo "$name=$(eval echo \$$name)"
  done < $ROOT_PATH/params.txt
  exit_with_success


# Kill ALL docker containersy/
elif [[ "$CMD" == "kill-all-containers" ]]; then
  confirm "Warning: all your docker containers are going to be killed ?"
  docker kill $(docker ps -q)
  exit_with_success


# Create a ngrok tunnel of localhost:80 api
elif [[ "$CMD" == "ngrok" ]]; then
 if [[ "$SERVICE" == "not-set" ]]; then
   screen -S api-ngrok -dm
   screen -r api-ngrok -X stuff "./$COMMAND_NAME -s api ngrok\n"
   screen -S webapp-ngrok -dm
   screen -r webapp-ngrok -X stuff "./$COMMAND_NAME -s webapp ngrok\n"
 fi
 PORT=80
 SUBDOMAIN=$NGROK_API_SUBDOMAIN
 if [[ "$SERVICE" == "webapp" ]]; then
   PORT=3000
   SUBDOMAIN=$NGROK_WEBAPP_SUBDOMAIN
 fi
 ngrok http -subdomain=$SUBDOMAIN $PORT
 exit_with_success


# Pull and build the docker images from no cache
elif [[ "$CMD" == "rebuild" ]]; then
  cd $ROOT_PATH
  docker-compose -f docker-compose.$MODE.yml pull apidb-$MODE
  docker-compose -f docker-compose.$MODE.yml build --no-cache $(containers_from_names $*)
  exit_with_success


# Restart docker-compose up with forcing recreation and unmounting volumes
elif [[ "$CMD" == "restart" ]]; then
  docker-compose -f docker-compose.$MODE.yml down --volumes $(containers_from_names $*)
  export PLATFORM=$PLATFORM && bash scripts/start_$MODE.sh  --force-recreate $(containers_from_names $*)
  exit_with_success


# Start docker-compose up with adapted env variables or webapps with local env
elif [[ "$CMD" == "start" ]]; then
  cd $ROOT_PATH
  export PLATFORM=$PLATFORM && bash scripts/start_$MODE.sh $(containers_from_names $*)
  exit_with_success

# Stop development containers
elif [[ "$CMD" == "stop" ]]; then
  cd $ROOT_PATH
  docker-compose -f docker-compose.$MODE.yml stop $(containers_from_names $*)
  exit_with_success


# =============================================
# Webapp commands
# =============================================

# Start the webapp front
elif [[ "$CMD" == "webapp" ]]; then
  SUB_CMD=${*:-not-set}
  if [[ "$SUB_CMD" == "not-set" ]]; then
    exit_with_error "You need to specify a sub command : build or start"
  fi
  API_URL=''
  if [[ "$PLATFORM" == "ngrok" ]];then
    API_URL='https://$NGROK_API_SUBDOMAIN.ngrok.io'
  fi
  cd $ROOT_PATH/webapp
  API_URL=$API_URL yarn $*
  exit_with_success


# =============================================
# Deploy commands
# =============================================

CURRENT_BRANCH=$(git symbolic-ref -q HEAD)
CURRENT_BRANCH=${CURRENT_BRANCH##refs/heads/}

function update_branch {
  branch="$1"
  git fetch
  git checkout $branch
  git reset --hard origin/$branch || (git checkout "$CURRENT_BRANCH" && exit_with_error)
}


# Tag new version using main repo
elif [[ "$CMD" == "tag" ]]; then
  git fetch

  if [[ "$TAG" == "not-set" ]]; then
    latest_tag=`git tag --list | grep '^v' | sort --version-sort | tail -n 1 | sed -e 's/^v//'`
    incremented_tag=`echo "$latest_tag" | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}'`
    confirm "No tag specified: use $incremented_tag (previous version was $latest_tag) ?"
    TAG="$incremented_tag"
  fi
  TAG_VERSION="v$TAG"

  if $(git tag --list | grep -q $TAG_VERSION); then
    exit_with_error "$TAG already exists."
  fi

  cd "$ROOT_PATH"/api
  echo "$TAG_VERSION" > version.txt

  cd "$ROOT_PATH"
  git add api/version.txt

  cd "$ROOT_PATH"/webapp
  yarn version --new-version "$TAG"
  cd -

  git commit -m "🚀 $TAG_VERSION"
  git push origin master
  git push origin "$TAG_VERSION"

  echo "New version tagged : $TAG"

  git checkout "$CURRENT_BRANCH"
  exit_with_success


# Deploy all components using main repo
elif [[ "$CMD" == "deploy" ]]; then
  ensure_remote "Deploy cannot be run on the local environment. Use (for example) \"$COMMAND_NAME -e staging -t X.Y.Z "$CMD"\"."

  if [[ "$TAG" == 'not-set' ]]; then
    latest_tag=`git tag --list | grep '^v' | sort --version-sort | tail -n 1 | sed -e 's/^v//'`
    confirm "No tag specified: deploy latest ($latest_tag) ?"
    TAG="$latest_tag"
  fi

  echo "$TAG will be deployed to $ENV"
  cd $ROOT_PATH
  update_branch $ENV

  if [[ ! -z $(git ls-remote --tags origin refs/tags/v"$TAG") ]]; then
    git checkout "v$TAG"
  else
    git checkout "$CURRENT_BRANCH"
    exit_with_error "You need to specify an existing remote tag to deploy"
  fi

  commit_to_deploy=$(git log -n 1 --pretty=format:%H)
  if [[ "$ENV" == "production" ]]; then
    confirm "Warning: code will be deployed to production. Are you sure ?"
    update_branch staging
    staging_commit=$(git log -n 1 --pretty=format:%H staging)
    if [[ "$staging_commit" != "$commit_to_deploy" ]]; then
      git checkout "$CURRENT_BRANCH"
      exit_with_error "Can only deploy in production commits that are also deployed in staging"
    fi
  fi

  git push -f origin HEAD:"$ENV"
  git checkout "$CURRENT_BRANCH"
  function follow_deployment() {
    scalingo -a $1 deployment-follow | grep -B10000 -m1 'osc-fr1.scalingo.io' | sed -e "s/^/[$1] /" &
  }
  follow_deployment $APP_NAME-api-$ENV
  wait
  exit_with_success

# Display the current version tag
elif [[ "$CMD" == "version" ]]; then
  cat "$ROOT_PATH/api/version.txt"
  exit_with_success


# =============================================
# Initialization commands
# =============================================

# Install new local environment
elif [[ "$CMD" == "install" ]]; then
  cd $ROOT_PATH/webapp
	yarn
  exit_with_success


# Create symlink to use "$(echo $COMMAND_NAME)" command (admin rights may be needed)
elif [[ "$CMD" == "symlink" ]]; then
	cd /usr/local/bin && ln -sf '"$(pwd)"'/$COMMAND_NAME $COMMAND_NAME && chmod +x $COMMAND_NAME && chmod +x '"$(pwd)"'/$COMMAND_NAME
  exit_with_success


# =============================================
# Administration commands
# =============================================

# Connect to Postgresql database in command line
elif [[ "$CMD" == "psql" ]]; then
  COLUMNS=${COLUMNS:-''};
  if [[ "$ENV" == "not-set" ]]; then
    check start ${DATABASE}db
		docker exec -it $POSTGRES_SERVICE bash -c "COLUMNS='$COLUMNS' PGPASSWORD='$POSTGRES_PASSWORD' psql -h localhost -U '$POSTGRES_USER' '$POSTGRES_DB' '$*'"
  else
    scalingo -a "$SCALINGO_APP" pgsql-console
  fi
  exit_with_success

# Open a python prompt in the specified environment
elif [[ "$CMD" == "python" ]]; then
	if [[ "$ENV" == "not-set" ]]; then
    check start api
		docker exec -it $API_SERVICE bash -c "cd /opt/api && PYTHONPATH=. python -i scripts/shell.py '"$CMD $*"'"
	else
		scalingo -a "$SCALINGO_APP" run "python -i scripts/shell.py"
	fi
  exit_with_success

# =============================================
# Python Scripts commands
# =============================================

# Run python scripts from api/scripts
else
  if [[ "$ENV" == "not-set" ]]; then
    check start api
    docker exec $API_SERVICE bash -c "cd /opt/api && PYTHONPATH=. python scripts/manager.py '"$CMD $*"'"
  else
    scalingo -a "$SCALINGO_APP" run 'python scripts/manager.py '"$CMD $*"''
  fi
  exit_with_success
fi

# =============================================
# Execute command
# =============================================

exit_with_error "Did not find a matched command for $CMD"
